df[(df["diferencia"] < -50) & (df["diferencia"] >= -89),"etiquetado"] <- "naranja"
df[df["diferencia"] <= -90,"etiquetado"] <- "rojo"
df["diferencia"] <- df["diferencia"]/100
a[[i]] <- df
} #Termina for
tmp <- filter(data,eventCategory == unique(data$eventCategory)[i])
tmp <- if(dim(tmp)[1] < 3){
tmp <- rbind(tmp, tmp[2,])
}else{
tmp}
#Logica: para Etiquetar con un Rango de 3 dias
if(dim(tmp)[1] == length(rep(seq(1, round(dim(tmp)[1]/3), 1), each = 3))){
tmp["rango_3_dias"] <- rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)
}else if(dim(tmp)[1] > length(rep(seq(1, round(dim(tmp)[1]/3), 1), each = 3))){
tmp["rango_3_dias"] <- c(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3),max(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)) + 1)
}else{
tmp["rango_3_dias"] <- c(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3),max(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)) + 1,1)
}
View(tmp)
#Graficas de Control
group_by(base, etiquetado) %>% count(conteo = n())
#Graficas de Control
group_by(data_new, etiquetado) %>% count(conteo = n())
group_by(data_new, eventCategory, etiquetado) %>% count(conteo = n())
eventCategory == unique(data_new$ga.eventCategory)[4]
eventCategory == unique(data_new$eventCategory)[4]
eventCategory == unique(data_new$eventCategory)[4])
data_event <- filter(data_new, eventCategory == unique(data_new$eventCategory)[4])
#Graficas de Control
print_percentage <- scales::label_comma(accuracy = 0.1, scale = 100, suffix = '%')
data_event
data_event
fig <- plot_ly(
data = data_event,
x = ~max_fecha,
hoverinfo = 'text'
) %>%
add_lines(y = ~diferencia,
name = 'Eventos diferencia porcentual',
marker = list(color = "#0052ce"),
line = list(color = '#0052ce', width = 2),
fill = '#0052ce',
text = ~max_fecha
) %>%
add_annotations(
x = filtrado$max_fecha,
y = filtrado$diferencia,
text = ~print_percentage(diferencia),
yanchor = 'bottom',
showarrow = FALSE
) %>%
layout(
title = paste0('Monitoreo de Eventos cada 3 días:  ', unique(filtrado$ga.eventCategory)),
xaxis = list(title = "Revisar días que sobre pasan la Línea Crítica", tickangle = 0),
yaxis = list(
title = 'Diferencia Respecto a los días anteriores',
range = c(min(filtrado$diferencia)/.35, max(filtrado$diferencia)/.95),
tickformat = '%,2.f'
),
legend = list(x = .40, y = -.15, orientation = 'h'),
margin = list(r = -2),
hovermode = 'compare',
shapes = lines
) %>%
add_lines(y=-.90,
name = 'Línea Crítica',
line = list(color = '#ce0015', width = 1),
text = "-90%"
)%>%
add_lines(y=-.35,
name = 'Alerta I',
line = list(color = '#cfc625', width = 1),
text = "-35%"
)%>%
add_lines(y=-.50,
name = 'Alerta II',
line = list(color = '#ce6e00', width = 1),
text = "-50%")
fig <- plot_ly(
data = data_event,
x = ~max_fecha,
hoverinfo = 'text'
) %>%
add_lines(y = ~diferencia,
name = 'Eventos diferencia porcentual',
marker = list(color = "#0052ce"),
line = list(color = '#0052ce', width = 2),
fill = '#0052ce',
text = ~max_fecha
) %>%
add_annotations(
x = data_event$max_fecha,
y = data_event$diferencia,
text = ~print_percentage(diferencia),
yanchor = 'bottom',
showarrow = FALSE
) %>%
layout(
title = paste0('Monitoreo de Eventos cada 3 días:  ', unique(data_event$ga.eventCategory)),
xaxis = list(title = "Revisar días que sobre pasan la Línea Crítica", tickangle = 0),
yaxis = list(
title = 'Diferencia Respecto a los días anteriores',
range = c(min(data_event$diferencia)/.35, max(data_event$diferencia)/.95),
tickformat = '%,2.f'
),
legend = list(x = .40, y = -.15, orientation = 'h'),
margin = list(r = -2),
hovermode = 'compare',
shapes = lines
) %>%
add_lines(y=-.90,
name = 'Línea Crítica',
line = list(color = '#ce0015', width = 1),
text = "-90%"
)%>%
add_lines(y=-.35,
name = 'Alerta I',
line = list(color = '#cfc625', width = 1),
text = "-35%"
)%>%
add_lines(y=-.50,
name = 'Alerta II',
line = list(color = '#ce6e00', width = 1),
text = "-50%")
fig <- plot_ly(
data = data_event,
x = ~max_fecha,
hoverinfo = 'text'
) %>%
add_lines(y = ~diferencia,
name = 'Eventos diferencia porcentual',
marker = list(color = "#0052ce"),
line = list(color = '#0052ce', width = 2),
fill = '#0052ce',
text = ~max_fecha
) %>%
add_annotations(
x = data_event$max_fecha,
y = data_event$diferencia,
text = ~print_percentage(diferencia),
yanchor = 'bottom',
showarrow = FALSE
) %>%
layout(
title = paste0('Monitoreo de Eventos cada 3 días:  ', unique(data_event$eventCategory)),
xaxis = list(title = "Revisar días que sobre pasan la Línea Crítica", tickangle = 0),
yaxis = list(
title = 'Diferencia Respecto a los días anteriores',
range = c(min(data_event$diferencia)/.35, max(data_event$diferencia)/.95),
tickformat = '%,2.f'
),
legend = list(x = .40, y = -.15, orientation = 'h'),
margin = list(r = -2),
hovermode = 'compare',
shapes = lines
) %>%
add_lines(y=-.90,
name = 'Línea Crítica',
line = list(color = '#ce0015', width = 1),
text = "-90%"
)%>%
add_lines(y=-.35,
name = 'Alerta I',
line = list(color = '#cfc625', width = 1),
text = "-35%"
)%>%
add_lines(y=-.50,
name = 'Alerta II',
line = list(color = '#ce6e00', width = 1),
text = "-50%")
fig
data_event
View(data_event)
eval(parse('get_data.R', encoding = 'UTF-8'))
data <- procces_info("Datos/Dataset Eventos 2020 - Sheet1.csv")
data
#Etiquetado de Datos
traffic_lights  <- function(data){
a <- list()
#Para cada eventCategory colocamos el semaforo
for(i in seq(1,length(unique(data$eventCategory)))){
tmp <- filter(data,eventCategory == unique(data$eventCategory)[i])
tmp <- if(dim(tmp)[1] < 3){
tmp <- rbind(tmp, tmp[2,])
}else{
tmp}
#Logica: para Etiquetar con un Rango de 3 dias
if(dim(tmp)[1] == length(rep(seq(1, round(dim(tmp)[1]/3), 1), each = 3))){
tmp["rango_3_dias"] <- rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)
}else if(dim(tmp)[1] > length(rep(seq(1, round(dim(tmp)[1]/3), 1), each = 3))){
tmp["rango_3_dias"] <- c(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3),max(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)) + 1)
}else{
tmp["rango_3_dias"] <- c(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3),max(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)) + 1,1)
}
#Agrupacion y variables Eventos
df <- tmp %>%
group_by(eventCategory, rango_3_dias) %>%
summarise(
max_fecha = max(fecha),
suma = sum(totalEvents),
promedio = mean(totalEvents),
sd = sd(totalEvents),
mediana = median(totalEvents),
minimo = min(totalEvents),
max = max(totalEvents))
#Logica: para comparar contra los días anteriores
df["dif_event_dia_ant"] <- c(0,diff(df$max))
df["dia_ant"] <- if(df["dif_event_dia_ant"] < 0){
df$max + abs(df$dif_event_dia_ant)
}else{
df$max - df$dif_event_dia_ant
}
diferencia <- function(x,y){
if(x <= y){
(x/y - 1) * 100
}else{
(y/x)*100
}
}
df["diferencia"] <- round(diferencia(df$max,df$dia_ant))
#Etiquetado con el Maximo el Rango por Evento
df["etiquetado"] <- ""
df[df["diferencia"] >= -34,"etiquetado"] <- "verde"
df[(df["diferencia"] <= -35) & (df["diferencia"] >= -50),"etiquetado"] <- "amarillo"
df[(df["diferencia"] < -50) & (df["diferencia"] >= -89),"etiquetado"] <- "naranja"
df[df["diferencia"] <= -90,"etiquetado"] <- "rojo"
df["diferencia"] <- df["diferencia"]/100
a[[i]] <- df
} #Termina for
data_new <- do.call(rbind, a)
return(data_new)
}
data_new <- traffic_lights(data)
View(data_new)
unique(data_new$eventCategory)[3]
group_by(data_new, etiquetado) %>% count(conteo = n())
group_by(data_new, eventCategory, etiquetado) %>% count(conteo = n())
data_event <- filter(data_new, eventCategory == unique(data_new$eventCategory)[3])
#Graficas de Control
print_percentage <- scales::label_comma(accuracy = 0.1, scale = 100, suffix = '%')
fig <- plot_ly(
data = data_event,
x = ~max_fecha,
hoverinfo = 'text'
) %>%
add_lines(y = ~diferencia,
name = 'Eventos diferencia porcentual',
marker = list(color = "#0052ce"),
line = list(color = '#0052ce', width = 2),
fill = '#0052ce',
text = ~max_fecha
) %>%
add_annotations(
x = data_event$max_fecha,
y = data_event$diferencia,
text = ~print_percentage(diferencia),
yanchor = 'bottom',
showarrow = FALSE
) %>%
layout(
title = paste0('Monitoreo de Eventos cada 3 días:  ', unique(data_event$eventCategory)),
xaxis = list(title = "Revisar días que sobre pasan la Línea Crítica", tickangle = 0),
yaxis = list(
title = 'Diferencia Respecto a los días anteriores',
range = c(min(data_event$diferencia)/.35, max(data_event$diferencia)/.95),
tickformat = '%,2.f'
),
legend = list(x = .40, y = -.15, orientation = 'h'),
margin = list(r = -2),
hovermode = 'compare',
shapes = lines
) %>%
add_lines(y=-.90,
name = 'Línea Crítica',
line = list(color = '#ce0015', width = 1),
text = "-90%"
)%>%
add_lines(y=-.35,
name = 'Alerta I',
line = list(color = '#cfc625', width = 1),
text = "-35%"
)%>%
add_lines(y=-.50,
name = 'Alerta II',
line = list(color = '#ce6e00', width = 1),
text = "-50%")
fig
shiny::runApp('~/3_GitHub/Shiny/Shiny_Aprendizaje')
create_wordcloud <- function(data, num_words = 100, background = "white") {
# If text is provided, convert it to a dataframe of word frequencies
if (is.character(data)) {
corpus <- Corpus(VectorSource(data))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
tdm <- as.matrix(TermDocumentMatrix(corpus))
data <- sort(rowSums(tdm), decreasing = TRUE)
data <- data.frame(word = names(data), freq = as.numeric(data))
}
# Make sure a proper num_words is provided
if (!is.numeric(num_words) || num_words < 3) {
num_words <- 3
}
# Grab the top n most common words
data <- head(data, n = num_words)
if (nrow(data) == 0) {
return(NULL)
}
wordcloud2(data, backgroundColor = background)
}
#La lectura de archivos es mas eficiente fuera de server
mass_shootings <- read.csv("data/mass-shootings.csv")
server <- function(input, output) {
#https://stackoverflow.com/questions/53016404/advantages-of-reactive-vs-observe-vs-observeevent/53016939#53016939
#observe, monitorea en cualquier momento todos los valores reactivos en su entorno, no devuelve ningun valor para su uso en el codigo
observe({ showNotification(paste("Mostrando Evento Observe ", input$name)) })
#ObserveEvent, es similar a observe a diferencia que necesita un disparador.
observeEvent(input$show_observe, {
showModal(modalDialog(paste("Hola ", input$name))) } )
observeEvent(input$show_about, {
showModal(modalDialog("This data was compiled by Mother Jones, nonprofit founded in 1976. Originally covering cases from 1982-2012, this database has since been expanded numerous times to remain current.", title = 'About'))
})
#eventeReactive, Cree una variable , con un disparador definido similar a observeEvent. Use esto cuando desee una variable reactiva que se evalúe debido a un disparador en lugar de cuando se llama.
mensaje_reactive <- eventReactive(input$show_reactivo, {
input$continent })
#reactive, permite al usuario monitorear el estado de una entrada u otra variable cambiante y devolver el valor para usar en otra parte del código.
data_reactive <- reactive({ gapminder %>% filter(continent %in% input$continent & year %in% input$year) })
#isolate
output$show_isolate <- renderText({ paste("Aislando un Valor con Isolate, ",isolate({input$continent}), input$year, sep = ",") })
output$show_reactivo <- renderText({
msn_reactive <- mensaje_reactive() #Usando los datos de EventReactive
paste("Boton Reactivo  ", msn_reactive , ", ")
})
rval_mass_shootings <- reactive({
mass_shootings$date <- mdy(mass_shootings$date)
mass_shootings %>%
filter(
date >= input$date_range[1],
date <= input$date_range[2],
fatalities >= input$nb_fatalities)
})
output$plot_1 <- renderPlotly({
ggplotly({
validate(need((input$year != '') & (input$continent != ''), "Puedes explorar otros continentes y años"))
g_1 <- data_reactive() %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, colour=continent)) +
geom_point() +
ggtitle("Ingreso Percapita, Esperanza de Vida y población") +
theme_bw()
g_2 <- data_reactive() %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, colour=country)) +
geom_point() +
facet_wrap(~continent) +
ggtitle("Ingreso Percapita, Esperanza de Vida y población") +
theme_bw()
if (input$fit) { g_2 } else { g_1 } })
})
output$plot_2 <- renderPlotly({
validate(need((input$year != '') & (input$continent != ''), "Puedes explorar otros continentes y años"))
data_reactive() %>%
ggplot(aes(x=factor(year),y=lifeExp, fill=continent)) +
geom_boxplot() +
geom_jitter(width=0.1,alpha=0.2) +
xlab("Year")+
facet_wrap(~continent,ncol = 4) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Esperanza de Vida paises del Continente") })
output$table <- DT::renderDataTable(DT::datatable({ data_reactive() %>%
group_by(country, continent, year) %>%
summarize(esperanza_de_vida = ceiling(mean(lifeExp)),
poblacion = round(mean(pop),0),
ingresos = round(mean(gdpPercap)))  }))
output$map <- leaflet::renderLeaflet({
rval_mass_shootings() %>%
leaflet() %>%
setView( -98.58, 39.82, zoom = 5) %>%
addTiles() %>%
addCircleMarkers(
popup = ~summary, radius = ~sqrt(fatalities)*3,
fillColor = 'red', color = 'red', weight = 1
) })
output$download_data <- downloadHandler(
filename = "gapminder_app.csv",
content = function(file){
write.csv(data_reactive(), file, row.names = FALSE) })
input_file <- reactive({
if (is.null(input$file)) {
return("")
}
# Read the text in the uploaded file
readLines(input$file$datapath)
})
output$cloud <- renderWordcloud2({
if(input$you_text) { create_wordcloud( as.character(input$text) ) }
else { create_wordcloud(data = as.character(input_file()), num_words = input$num, background = input$col) }
})
}
setwd("3_GitHub/Shiny-Analytics/")
eval(parse('get_data.R', encoding = 'UTF-8'))
data <- procces_info("Datos/Dataset Eventos 2020 - Sheet1.csv")
#Etiquetado de Datos
traffic_lights  <- function(data){
a <- list()
#Para cada eventCategory colocamos el semaforo
for(i in seq(1,length(unique(data$eventCategory)))){
tmp <- filter(data,eventCategory == unique(data$eventCategory)[i])
tmp <- if(dim(tmp)[1] < 3){
tmp <- rbind(tmp, tmp[2,])
}else{
tmp}
#Logica: para Etiquetar con un Rango de 3 dias
if(dim(tmp)[1] == length(rep(seq(1, round(dim(tmp)[1]/3), 1), each = 3))){
tmp["rango_3_dias"] <- rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)
}else if(dim(tmp)[1] > length(rep(seq(1, round(dim(tmp)[1]/3), 1), each = 3))){
tmp["rango_3_dias"] <- c(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3),max(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)) + 1)
}else{
tmp["rango_3_dias"] <- c(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3),max(rep(seq(1, floor(dim(tmp)[1]/3), 1), each = 3)) + 1,1)
}
#Agrupacion y variables Eventos
df <- tmp %>%
group_by(eventCategory, rango_3_dias) %>%
summarise(
max_fecha = max(fecha),
suma = sum(totalEvents),
promedio = mean(totalEvents),
sd = sd(totalEvents),
mediana = median(totalEvents),
minimo = min(totalEvents),
max = max(totalEvents))
#Logica: para comparar contra los días anteriores
df["dif_event_dia_ant"] <- c(0,diff(df$max))
df["dia_ant"] <- if(df["dif_event_dia_ant"] < 0){
df$max + abs(df$dif_event_dia_ant)
}else{
df$max - df$dif_event_dia_ant
}
diferencia <- function(x,y){
if(x <= y){
(x/y - 1) * 100
}else{
(y/x)*100
}
}
df["diferencia"] <- round(diferencia(df$max,df$dia_ant))
#Etiquetado con el Maximo el Rango por Evento
df["etiquetado"] <- ""
df[df["diferencia"] >= -34,"etiquetado"] <- "verde"
df[(df["diferencia"] <= -35) & (df["diferencia"] >= -50),"etiquetado"] <- "amarillo"
df[(df["diferencia"] < -50) & (df["diferencia"] >= -89),"etiquetado"] <- "naranja"
df[df["diferencia"] <= -90,"etiquetado"] <- "rojo"
df["diferencia"] <- df["diferencia"]/100
a[[i]] <- df
} #Termina for
data_new <- do.call(rbind, a)
return(data_new)
}
data_new <- traffic_lights(data)
#- Analisis Exploratorio
group_by(data_new, etiquetado) %>% count(conteo = n())
group_by(data_new, eventCategory, etiquetado) %>% count(conteo = n())
data_event <- filter(data_new, eventCategory == unique(data_new$eventCategory)[3])
#Graficas de Control
print_percentage <- scales::label_comma(accuracy = 0.1, scale = 100, suffix = '%')
fig <- plot_ly(
data = data_event,
x = ~max_fecha,
hoverinfo = 'text'
) %>%
add_lines(y = ~diferencia,
name = 'Eventos diferencia porcentual',
marker = list(color = "#0052ce"),
line = list(color = '#0052ce', width = 2),
fill = '#0052ce',
text = ~max_fecha
) %>%
add_annotations(
x = data_event$max_fecha,
y = data_event$diferencia,
text = ~print_percentage(diferencia),
yanchor = 'bottom',
showarrow = FALSE
) %>%
layout(
title = paste0('Monitoreo de Eventos cada 3 días:  ', unique(data_event$eventCategory)),
xaxis = list(title = "Revisar días que sobre pasan la Línea Crítica", tickangle = 0),
yaxis = list(
title = 'Diferencia Respecto a los días anteriores',
range = c(min(data_event$diferencia)/.35, max(data_event$diferencia)/.95),
tickformat = '%,2.f'
),
legend = list(x = .40, y = -.15, orientation = 'h'),
margin = list(r = -2),
hovermode = 'compare',
shapes = lines
) %>%
add_lines(y=-.90,
name = 'Línea Crítica',
line = list(color = '#ce0015', width = 1),
text = "-90%"
)%>%
add_lines(y=-.35,
name = 'Alerta I',
line = list(color = '#cfc625', width = 1),
text = "-35%"
)%>%
add_lines(y=-.50,
name = 'Alerta II',
line = list(color = '#ce6e00', width = 1),
text = "-50%")
fig
runApp('app')
